const _0x40f6 = [
	'length',
	'indexSwave',
	'noRpeak',
	'ceil',
	'RPeakHeight',
	'isSigunsteady',
	'concat',
	'apply',
	'fill',
	'indexPeak',
	'max',
	'sqrt',
	'slice',
	'interval',
	'min',
	'SwaveMinHeight',
	'secondSteady',
	'drawDataAry',
];
const _0x92d1 = function (_0x40f60a, _0x92d131) {
	_0x40f60a = _0x40f60a - 0x0;
	let _0x54aa09 = _0x40f6[_0x40f60a];
	return _0x54aa09;
};
import {iir_biquad_new, medianBiquad} from './wlbiquad.js';
import {wlvar, mean} from './math/tool.js';
export function computeECG(_0x2cd50b) {
	const _0x3af22b = 0x3e8;
	const _0x157170 = 0x2ee;
	let _0x16ad83 = new Array(_0x3af22b)['fill'](0x0);
	for (let _0x103472 = 0x0; _0x103472 < _0x3af22b; _0x103472++) {
		_0x16ad83[_0x103472] = _0x2cd50b[_0x103472 * 0x2];
	}
	let _0x2da074 = 0x19;
	let _0x4fd6a7 = medianBiquad(_0x16ad83, 0x14);
	let _0x3bd51f = medianBiquad(_0x16ad83, 0x32);
	let _0x124868 = medianBiquad(_0x16ad83, 0xa);
	let _0x5963b6 = {
		isSigunsteady: ![],
		noRpeak: !![],
		meanHR: 0x0,
		secondSteady: 0x0,
		RPeakHeight: 0x0,
		SwaveMinHeight: 0x0,
		drawDataAry: new Array(_0x157170)[_0x92d1('0x8')](0x0),
	};
	let _0x53f22b = [];
	let _0xaab77c = [];
	_0x5963b6['isSigunsteady'] = computeSigunsteady(
		_0x16ad83[_0x92d1('0xc')](0xfa - _0x2da074, 0x3e8 - _0x2da074),
		_0x124868[_0x92d1('0xc')](0xfa - _0x2da074, 0x3e8 - _0x2da074),
	);
	if (_0x5963b6['isSigunsteady']) {
		_0x5963b6['isSigunsteady'] = computeSigunsteady(
			_0x16ad83[_0x92d1('0xc')](0x1f4 - _0x2da074, 0x3e8 - _0x2da074),
			_0x124868[_0x92d1('0xc')](0x1f4 - _0x2da074, 0x3e8 - _0x2da074),
		);
		let _0x5e74cb = computeHRinterval(
			_0x16ad83[_0x92d1('0xc')](0x1f4 - _0x2da074, 0x3e8 - _0x2da074),
			_0x4fd6a7[_0x92d1('0xc')](0x1f4 - _0x2da074, 0x3e8 - _0x2da074),
		);
		_0x5963b6['noRpeak'] = _0x5e74cb['noRpeak'];
		_0x53f22b = _0x5e74cb['indexPeak'];
		_0xaab77c = _0x5e74cb['indexSwave'];
		if (_0x5e74cb['interval'] > 0x2 && !_0x5963b6[_0x92d1('0x5')]) {
			_0x5963b6['meanHR'] = Number((0x3a98 / _0x5e74cb['interval'])['toFixed'](0x1));
			_0x5963b6['secondSteady'] = 0x2;
		}
		for (let _0x1466c4 = 0x0; _0x1466c4 < _0x53f22b[_0x92d1('0x0')]; _0x1466c4++) {
			_0x53f22b[_0x1466c4] += 0xfa;
		}
		for (let _0x492584 = 0x0; _0x492584 < _0xaab77c['length']; _0x492584++) {
			_0xaab77c[_0x492584] += 0xfa;
		}
	} else {
		let _0x2919a8 = computeHRinterval(
			_0x16ad83['slice'](0xfa - _0x2da074, 0x3e8 - _0x2da074),
			_0x4fd6a7[_0x92d1('0xc')](0xfa - _0x2da074, 0x3e8 - _0x2da074),
		);
		_0x5963b6[_0x92d1('0x2')] = _0x2919a8['noRpeak'];
		_0x53f22b = _0x2919a8[_0x92d1('0x9')];
		_0xaab77c = _0x2919a8[_0x92d1('0x1')];
		if (_0x2919a8['interval'] > 0x2) {
			_0x5963b6['meanHR'] = Number((0x3a98 / _0x2919a8[_0x92d1('0xd')])['toFixed'](0x1));
			_0x5963b6[_0x92d1('0x10')] = 0x3;
		}
	}
	if (_0x53f22b[_0x92d1('0x0')] > 0x0) {
		let _0x2c14da = smooth_shipR(_0x3bd51f['slice'](0xfa - _0x2da074, 0x3e8 - _0x2da074), _0x53f22b, 0xf, 0x7, 0x7);
		for (let _0x3440f1 = 0x0; _0x3440f1 < _0x157170; _0x3440f1++) {
			_0x5963b6[_0x92d1('0x11')][_0x3440f1] = _0x2c14da[_0x3440f1];
		}
		_0x5963b6[_0x92d1('0x4')] = 0x0;
		for (const _0x78937e of _0x53f22b) {
			_0x5963b6['RPeakHeight'] = Math[_0x92d1('0xa')](_0x5963b6['RPeakHeight'], _0x2c14da[_0x78937e]);
		}
		_0x5963b6[_0x92d1('0xf')] = 0x0;
		for (const _0x185fdf of _0xaab77c) {
			_0x5963b6[_0x92d1('0xf')] = Math[_0x92d1('0xe')](_0x5963b6['SwaveMinHeight'], _0x2c14da[_0x185fdf]);
		}
	} else {
		for (let _0x360e37 = 0x0; _0x360e37 < _0x157170; _0x360e37++) {
			_0x5963b6[_0x92d1('0x11')][_0x360e37] = _0x3bd51f[_0x360e37 + 0xfa - _0x2da074];
		}
	}
	return _0x5963b6;
}
function getSig0(_0x4f290a) {
	let _0x1fcc85 = [];
	if (_0x4f290a['length'] < 0x7d0) {
		let _0x2722c4 = new Array(0x7d0 - _0x4f290a['length'])[_0x92d1('0x8')](0x0);
		_0x1fcc85 = _0x2722c4[_0x92d1('0x6')](_0x4f290a);
	} else {
		_0x1fcc85 = _0x4f290a['slice'](_0x4f290a['length'] - 0x7d0);
	}
	let _0x4d439f = _0x1fcc85[0x0];
	for (let _0x3b477c = 0x0; _0x3b477c < _0x1fcc85[_0x92d1('0x0')]; _0x3b477c++) {
		_0x1fcc85[_0x3b477c] = _0x1fcc85[_0x3b477c] - _0x4d439f;
	}
	return iir_biquad_new(_0x1fcc85);
}
function computeSigunsteady(_0x415568, _0x1180ff) {
	let _0x2d4523 = 0x0;
	for (let _0x564b62 = 0x0; _0x564b62 < _0x415568['length']; _0x564b62++) {
		_0x2d4523 = Math[_0x92d1('0xa')](Math['abs'](_0x1180ff[_0x564b62] - _0x415568[_0x564b62]), _0x2d4523);
	}
	return _0x2d4523 > 0x3e8 ? !![] : ![];
}
function computeHRinterval(_0x2c2ba4, _0x42702a) {
	let _0x1a0bc5 = new Array(_0x42702a[_0x92d1('0x0')])['fill'](0x0);
	let _0x40569e = 0x4;
	for (let _0x151972 = _0x40569e; _0x151972 < _0x42702a[_0x92d1('0x0')] - _0x40569e; _0x151972++) {
		_0x1a0bc5[_0x151972] = _0x42702a[_0x151972] - _0x42702a[_0x151972 + _0x40569e];
	}
	let _0x37cca7 = 0x7;
	let _0xd3c27d = new Array(_0x42702a[_0x92d1('0x0')])[_0x92d1('0x8')](0x0);
	for (let _0x21b584 = _0x37cca7; _0x21b584 < _0x1a0bc5[_0x92d1('0x0')] - _0x37cca7; _0x21b584++) {
		_0xd3c27d[_0x21b584] = _0x1a0bc5[_0x21b584] - _0x1a0bc5[_0x21b584 - _0x37cca7];
	}
	let _0x59a1a4 = Math[_0x92d1('0xa')][_0x92d1('0x7')](null, _0xd3c27d) * 0.4;
	_0x59a1a4 = Math[_0x92d1('0xe')](_0x59a1a4, 0x1f4);
	let _0x22490c = Math[_0x92d1('0xa')](0x50, _0x59a1a4);
	let _0x4edd5a = [];
	let _0x7f6526 = [];
	let _0x40f8b0 = -0x2710;
	let _0x48fd2f = 0x7;
	for (let _0x213991 = _0x48fd2f; _0x213991 < _0xd3c27d[_0x92d1('0x0')] - _0x48fd2f; _0x213991++) {
		if (
			_0xd3c27d[_0x213991] > _0x22490c &&
			_0xd3c27d[_0x213991] >= _0xd3c27d[_0x213991 - 0x1] &&
			_0xd3c27d[_0x213991] >= _0xd3c27d[_0x213991 + 0x1] &&
			_0x213991 - _0x40f8b0 > 0x3c
		) {
			let _0x38d75e = ![];
			let _0x4362b5 = _0x213991;
			let _0x1dbc9a = -0x3e8;
			for (let _0x9ad96c = -_0x48fd2f; _0x9ad96c < _0x48fd2f; _0x9ad96c++) {
				if (
					_0x2c2ba4[_0x213991 - _0x9ad96c] >= _0x2c2ba4[_0x213991 - _0x9ad96c - 0x1] &&
					_0x2c2ba4[_0x213991 - _0x9ad96c] >= _0x2c2ba4[_0x213991 - _0x9ad96c + 0x1]
				) {
					_0x38d75e = !![];
					if (_0x1dbc9a < _0x2c2ba4[_0x213991 - _0x9ad96c]) {
						_0x4362b5 = _0x213991 - _0x9ad96c;
						_0x1dbc9a = _0x2c2ba4[_0x4362b5];
					}
				}
			}
			if (_0x38d75e) {
				_0x4edd5a['push'](_0x4362b5);
				_0x40f8b0 = _0x4362b5;
				for (let _0x36c9e8 = 0x0; _0x36c9e8 < 0x2 * _0x48fd2f; _0x36c9e8++) {
					if (
						_0x2c2ba4[_0x213991 + _0x36c9e8] <= _0x2c2ba4[_0x213991 + _0x36c9e8 - 0x1] &&
						_0x2c2ba4[_0x213991 + _0x36c9e8] <= _0x2c2ba4[_0x213991 + _0x36c9e8 + 0x1]
					) {
						_0x7f6526['push'](_0x213991 + _0x36c9e8);
						break;
					}
				}
			}
		}
	}
	let _0x2c2ade = ![];
	let _0x451183 = 0x0;
	let _0x2dd687 = 0x1e;
	if (_0x4edd5a['length'] > 0x0) {
		for (let _0x25d512 = 0x0; _0x25d512 < _0x4edd5a['length']; _0x25d512++) {
			let _0x3d4c96 = Math[_0x92d1('0xa')](_0x4edd5a[_0x25d512] - _0x2dd687, 0x0);
			let _0x5dc315 = Math['min'](_0x4edd5a[_0x25d512] + _0x2dd687, _0xd3c27d['length']);
			for (let _0x389df0 = _0x3d4c96; _0x389df0 < _0x5dc315; _0x389df0++) {
				_0xd3c27d[_0x389df0] = 0x0;
			}
		}
		_0x451183 = _0x59a1a4 / Math[_0x92d1('0xb')](wlvar(_0xd3c27d));
		if (_0x451183 > 0x2 && _0x59a1a4 > 0x32) {
			_0x2c2ade = !![];
		}
	}
	let _0x589c4a = 0x0;
	let _0x7ba586 = ![];
	if (_0x4edd5a[_0x92d1('0x0')] > 0x2) {
		let _0x4c9cb5 = [];
		for (let _0x3215d9 = 0x1; _0x3215d9 < _0x4edd5a['length']; _0x3215d9++) {
			_0x4c9cb5['push'](_0x4edd5a[_0x3215d9] - _0x4edd5a[_0x3215d9 - 0x1]);
		}
		let _0x5add48 = Math['max']['apply'](null, _0x4c9cb5);
		let _0x49fb2e = Math['min']['apply'](null, _0x4c9cb5);
		if (_0x5add48 / _0x49fb2e < 1.35) {
			_0x589c4a = (_0x4edd5a[_0x4edd5a[_0x92d1('0x0')] - 0x1] - _0x4edd5a[0x0]) / (_0x4edd5a[_0x92d1('0x0')] - 0x1);
		}
	} else if (_0x4edd5a[_0x92d1('0x0')] === 0x2) {
		_0x589c4a = _0x4edd5a[0x1] - _0x4edd5a[0x0];
		if (_0x589c4a < 0xc8 || _0x589c4a > 0x190) {
			_0x589c4a = 0x0;
			_0x7ba586 = !![];
		}
	} else {
		_0x7ba586 = !![];
	}
	if (!_0x2c2ade) {
		_0x589c4a = 0x0;
	}
	return {
		interval: _0x589c4a,
		indexPeak: _0x4edd5a,
		noRpeak: _0x7ba586,
		indexSwave: _0x7f6526,
	};
}
function smooth_shipR(_0x5ad115, _0x2d56e2, _0xb6f9fb, _0x52a574, _0x400182) {
	let _0x5c19d4 = Math[_0x92d1('0x3')](_0xb6f9fb / 0x2);
	let _0x4c4403 = 0x0;
	let _0x166ca0 = 0x0;
	let [..._0x199d9c] = _0x5ad115;
	let _0x5877a7 = 0x0;
	if (_0x2d56e2[_0x166ca0] < _0x52a574) {
		_0x4c4403 = _0x2d56e2[_0x166ca0] + _0x400182;
		_0x166ca0 = 0x1;
	}
	while (_0x4c4403 < _0x5ad115[_0x92d1('0x0')]) {
		if (_0x166ca0 < _0x2d56e2[_0x92d1('0x0')] && _0x4c4403 + _0x5877a7 >= _0x2d56e2[_0x166ca0] - _0x52a574) {
			if (_0x5877a7 >= 0x1) {
				_0x5877a7 = _0x5877a7 - 0x1;
			} else {
				_0x4c4403 = _0x4c4403 + _0x52a574 + _0x400182;
				_0x166ca0 = _0x166ca0 + 0x1;
				if (_0x4c4403 > _0x5ad115['length']) {
					break;
				}
			}
			_0x199d9c[_0x4c4403] = mean(_0x5ad115[_0x92d1('0xc')](_0x4c4403 - _0x5877a7, _0x4c4403 + _0x5877a7 + 0x1));
		} else if (_0x4c4403 + _0x5877a7 >= _0x5ad115['length']) {
			if (_0x5877a7 >= 0x1) {
				_0x5877a7 = _0x5877a7 - 0x1;
			} else {
				break;
			}
			_0x199d9c[_0x4c4403] = mean(_0x5ad115[_0x92d1('0xc')](_0x4c4403 - _0x5877a7, _0x4c4403 + _0x5877a7 + 0x1));
		} else {
			_0x199d9c[_0x4c4403] = mean(_0x5ad115['slice'](_0x4c4403 - _0x5877a7, _0x4c4403 + _0x5877a7 + 0x1));
			_0x5877a7 = Math['min'](_0x5877a7 + 0x1, _0x5c19d4);
		}
		_0x4c4403 = _0x4c4403 + 0x1;
	}
	return _0x199d9c;
}
